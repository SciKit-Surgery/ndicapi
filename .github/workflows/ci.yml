on: push

jobs:
  test:
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental }}

    strategy:
      fail-fast: false
      matrix:
        python-ver: [3.7]
        os: [windows-latest]
        experimental: [false]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-ver }}

      - name: Install dependencies
        run: |
      
      - name: build Windows
        if: matrix.os == 'windows-latest'
        run: |
          set COMPILER=Visual Studio 14 Win64
          set CONFIGURATION=Release
          echo COMPILER = %COMPILER%, CONFIGURATION = %CONFIGURATION%
	  echo %COMPILER%
	  echo %CONFIGURATION%
          cmake -version
          mkdir build
          mkdir install
          cd build
          cmake -G "%COMPILER%" -DBUILD_PYTHON:BOOL=ON -DBUILD_SHARED_LIBS:BOOL=ON  -Dndicapi_BUILD_APPLICATIONS:BOOL=OFF -DCMAKE_INSTALL_PREFIX=../install --config %CONFIGURATION% ..
          cmake --build . --config %CONFIGURATION%
          cd ../
          "%PYTHON%\\python.exe setup.py sdist bdist_wheel --plat-name win_amd64"

      - name: build ubuntu 
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir build
          cd build
          cmake  -DBUILD_PYTHON:BOOL=ON -DBUILD_SHARED_LIBS:BOOL=ON  -Dndicapi_BUILD_APPLICATIONS:BOOL=OFF ..
          make
          cd ..

      - name: build macos
        if: matrix.os == 'macos-latest'
        run: |
          mkdir build
          cd build
          cmake  -DBUILD_PYTHON:BOOL=ON -DBUILD_SHARED_LIBS:BOOL=ON  -Dndicapi_BUILD_APPLICATIONS:BOOL=OFF ..
          make
          cd ..



  deploy:
    runs-on: ubuntu-18.04
    needs: test
    steps:
      - uses: actions/checkout@v2
      - uses: actions/checkout@master
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          # TODO: python version for deploy?
          python-version: 3.6

      - name: Install dependencies
        run: python -m pip install wheel twine setuptools

      - name: Build wheel
        run: |
          python setup.py sdist

      - name: Publish package if tagged release
        if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
