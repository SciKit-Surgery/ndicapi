on: push

jobs:
  test:
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental }}

    strategy:
      fail-fast: false
      matrix:
        python-ver: [3.7, 3.8, 3.9, '3.10', '3.11', '3.12']
        os: [ubuntu-latest, windows-latest, macos-latest]
        experimental: [false]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-ver }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install wheel twine auditwheel build
      
      - name: Add msbuild to PATH
        if: matrix.os == 'windows-latest'
        uses: microsoft/setup-msbuild@v1.0.2

      - name: build Windows
        if: matrix.os == 'windows-latest'
        run: |
          mkdir build
          mkdir install
          cd build
          cmake -G "Visual Studio 17 2022" -A x64 -DBUILD_PYTHON:BOOL=ON -DBUILD_SHARED_LIBS:BOOL=ON  -Dndicapi_BUILD_APPLICATIONS:BOOL=OFF -DCMAKE_INSTALL_PREFIX=../install ..
          cmake --build . 
          cd ../
          python.exe -m build
          python -m twine upload -u __token__ -p ${{secrets.PYPI_API_TOKEN}} dist/* --skip-existing
          rm -r build
          rm -r install

      - name: build Windows-32bit
        if: matrix.os == 'windows-latest'
        run: |
          mkdir build
          mkdir install
          cd build
          cmake -G "Visual Studio 17" -A Win32 -DBUILD_PYTHON:BOOL=ON -DBUILD_SHARED_LIBS:BOOL=ON  -Dndicapi_BUILD_APPLICATIONS:BOOL=OFF -DCMAKE_INSTALL_PREFIX=../install ..
          cmake --build .
          cd ../
          python.exe -m build
          python -m twine upload -u __token__ -p ${{secrets.PYPI_API_TOKEN}} dist/* --skip-existing
          rm -r build
          rm -r install

      - name: build ubuntu 
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir build
          cd build
          cmake  -DBUILD_PYTHON:BOOL=ON -DBUILD_SHARED_LIBS:BOOL=ON  -Dndicapi_BUILD_APPLICATIONS:BOOL=OFF ..
          make
          cd ..
          python -m build

      - name: build ubuntu manylinux
        if: matrix.os == 'ubuntu-latest' && matrix.python-ver == '3.10'
        uses: RalfG/python-wheels-manylinux-build@v0.7.1-manylinux2010_x86_64
        with:
          python-versions: 'cp36-cp36m cp37-cp37m cp38-cp38 cp39-cp39 cp310-cp310'
 
      - name: upload manylinux
        if: matrix.os == 'ubuntu-latest' && matrix.python-ver == '3.10'
        run: |
          python -m twine upload -u __token__ -p ${{secrets.PYPI_API_TOKEN}} dist/*-manylinux*.whl --skip-existing

      - name: build macos
        if: matrix.os == 'macos-latest'
        run: |
          mkdir build
          cd build
          cmake  -DBUILD_PYTHON:BOOL=ON -DBUILD_SHARED_LIBS:BOOL=ON  -Dndicapi_BUILD_APPLICATIONS:BOOL=OFF ..
          make
          cd ..
          python -m build
          python -m twine upload -u __token__ -p ${{secrets.PYPI_API_TOKEN}} dist/* --skip-existing

